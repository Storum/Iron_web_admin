/*
 * File: app/controller/add_order_panel_controller.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Iron.controller.add_order_panel_controller', {
    extend: 'Ext.app.Controller',

    config: {
        stores: [
            'order_actions_store'
        ],

        refs: {
            addOrderPanel: 'panel#addOrderPanel',
            addOrderMenu: 'panel#userMenu',
            id_order_menu: 'panel#addOrderPanel button[itemId=id_order_menu]',
            id_cancle_btn: 'panel#addOrderPanel button[itemId=id_cancle]',
            id_create_order_btn: 'panel#addOrderPanel  button[itemId=id_create_order]',
            client_field: 'panel#addOrderPanel  textfield[itemId=id_client_field]',
            ticket_number_field: 'panel#addOrderPanel numberfield[itemId=id_ticket_number_field]',
            container_count_field: 'panel#addOrderPanel   numberfield[itemId=id_container_count_field]',
            weight_field: 'panel#addOrderPanel   numberfield[itemId=id_weight_field]',
            weight_dress_field: 'panel#addOrderPanel numberfield[itemId=id_weight_dress_field]',
            white_field: 'panel#addOrderPanel   checkboxfield[itemId=id_white_field]',
            comment_field: 'panel#addOrderPanel   textfield[itemId=id_comment_field]',
            order_detail_list: 'panel#addOrderPanel list[itemId=order_detail_list]',
            id_select_client_btn: 'panel#addOrderPanel button[itemId=id_select_client_btn]',
            id_add_dress: 'panel#addOrderPanel button[itemId=id_add_dress]',
            id_delete_dress: 'panel#addOrderPanel button[itemId=id_delete_dress]',
            id_client_order_count: 'panel#addOrderPanel label[itemId=id_client_order_count]',
            id_tip: 'panel#addOrderPanel label[itemId=id_tip]',
            id_action_order_field: 'panel#addOrderPanel selectfield[itemId=id_action_order]',
            select_client_button: 'panel#clientPanel button[itemId=select_client_button]',
            cancel_client_button: 'panel#clientPanel button[itemId=cancel_button]'
        },

        control: {
            "id_cancle_btn": {
                tap: 'cancle_tap'
            },
            "id_order_menu": {
                tap: 'order_menu_tap'
            },
            "panel#addOrderPanel numberfield": {
                keyup: 'order_data_chenged'
            },
            "id_select_client_btn": {
                tap: 'client_select'
            },
            "id_add_dress": {
                tap: 'add_dress_tap'
            },
            "id_delete_dress": {
                tap: 'delete_dress'
            },
            "id_create_order_btn": {
                tap: 'add_order_tap'
            },
            "order_detail_list": {
                itemdoubletap: 'dress_Doubletap',
                itemsingletap: 'dress_item_tap'
            },
            "addOrderPanel": {
                show: 'Panel_open'
            },
            "weight_field": {
                keyup: 'home_weight_change'
            },
            "weight_dress_field": {
                keyup: 'dress_weight_change'
            },
            "id_action_order_field": {
                change: 'action_change'
            },
            "white_field": {
                change: 'is_white_check'
            },
            "comment_field": {
                keyup: 'comment_chenge'
            }
        }
    },

    cancle_tap: function(button, e, eOpts) {
        this.close_add_order_form();
        this.remove_record_window();

    },

    order_menu_tap: function(target) {

        var menu = this.getAddOrderMenu();
        if (!menu) {
            menu = Ext.create('widget.addordermenu');
        }


        // Show menu by menu button
        menu.showBy(target);


    },

    order_data_chenged: function(textfield, e, eOpts) {
        this.check_all_fields();
    },

    client_select: function(button, e, eOpts) {

        client_panel = Ext.create ('widget.clientpanel');
        client_panel.setModal(true);
        client_panel.setCentered(true);
        client_panel.source = 'add_order_panel_controller';
        Ext.Viewport.add (client_panel);
        client_panel.show ();


        var select_client_btn = this.getSelect_client_button();
        select_client_btn.setHidden(false);

        var cancle_client_btn = this.getCancel_client_button();
        cancle_client_btn.setHidden(false);


        client_panel.setWidth(980);
    },

    add_dress_tap: function(button, e, eOpts) {
        addDressPanel = Ext.create('widget.adddressfororderpanel');

        Ext.Viewport.add(addDressPanel);
        addDressPanel.source = 'add_order_panel_controller';
        addDressPanel.target = 'add';
        addDressPanel.order_count = this.getAddOrderPanel().order_count;
        addDressPanel.show();


    },

    delete_dress: function(button, e, eOpts) {
        var order_detail_list = this.getOrder_detail_list();
        var order_detail_store = order_detail_list.getStore();

        var selected_order_detail = order_detail_list.getSelection ()[0];

        if (selected_order_detail.get('id_order_detail'))
            this.removed_records[this.removed_records.length] = selected_order_detail;

        order_detail_store.remove(selected_order_detail);



        this.set_order_msg();
        this.check_weight_is_need();
        this.set_buttons_disable(false);
    },

    add_order_tap: function(button, e, eOpts) {
        var add_order_panel = this.getAddOrderPanel();


        if (add_order_panel.target == 'edit_order')
            this.update_order_to_base_and_close_window ();
        else
        {
            this.rec_win.focus();
        //    this.remove_record_window ();

            this.add_order_to_base_and_close_window();
        }

    },

    dress_Doubletap: function(dataview, index, target, record, e, eOpts) {
        addDressPanel = Ext.create('widget.adddressfororderpanel');

        Ext.Viewport.add(addDressPanel);
        addDressPanel.source = 'add_order_panel_controller';
        addDressPanel.target = 'edit';
        addDressPanel.record = record;
        addDressPanel.show();
    },

    dress_item_tap: function(dataview, index, target, record, e, eOpts) {
        this.getId_delete_dress().setDisabled(false);
    },

    Panel_open: function(component, eOpts) {

        this.get_current_weight_prices();

        this.removed_records = [];

        this.check_weight_is_need();


        var add_order_panel = this.getAddOrderPanel();


        if (add_order_panel.target !== 'edit_order')
            this.open_record_window();


    },

    home_weight_change: function(textfield, e, eOpts) {
        this.set_order_msg();
    },

    dress_weight_change: function(textfield, e, eOpts) {
        this.set_order_msg();
    },

    action_change: function(selectfield, newValue, oldValue, eOpts) {
        this.check_all_fields();
        this.update_order_prices_by_action();
        this.update_order_detail_prices();
        this.set_order_msg();
    },

    is_white_check: function(checkboxfield, newValue, oldValue, eOpts) {

        if (!newValue)
        {
            this.getTicket_number_field().setDisabled(true);
            this.getTicket_number_field().setValue("0");
        }
        else
            this.getTicket_number_field().setDisabled(false);


        this.check_all_fields();
    },

    comment_chenge: function(textfield, e, eOpts) {
        this.check_all_fields();
    },

    remove_record_window: function() {
        if (this.rec_win)
        {
            this.rec_win.close();
            this.rec_win = null;
            return;
        }
    },

    open_record_window: function() {
        this.remove_record_window();


        var t = this;

        var xmlhttp = this.getXmlHttp();
        xmlhttp.open('GET', 'record_video.html', false);
        xmlhttp.send(null);
        if (xmlhttp.status == 200) {

            var response = xmlhttp.responseText;
            var left = (screen.width/2)-(160);
            var top = (screen.height/2)-(120);

            var newWin = window.open('','windowName','toolbar=no, location=no, directories=no, status=no, menubar=no, scrollbars=no, resizable=no, copyhistory=no, height=240,width=320, top='+top+', left='+left, 'scrollbars=yes', 'url_record=f');
            newWin.document.write(response);
            newWin.url_record =  GlobalVars.url_setting + 'php/loader/endpoint.php';
            t.rec_win = newWin;


        }
    },

    load_order_data_to_form: function(record, client_name, name_dist) {
        var client = this.getClient_field();
        var ticket_number = this.getTicket_number_field();
        var container_count = this.getContainer_count_field();
        var weight = this.getWeight_field();
        var weight_dress = this.getWeight_dress_field();
        var white = this.getWhite_field();
        var comment = this.getComment_field();
        var action = this.getId_action_order_field();

        action.setValue (record.get('id_action'));

        //console.log(client.getValue());
        if (client.getValue() === '')
        {
            client.setValue(client_name);
            client.id_client = record.get('id_client');
        }

        ticket_number.setValue(record.get('ticket_number'));
        container_count.setValue(record.get('cont_count'));
        weight.setValue(record.get('weight_home'));
        weight_dress.setValue(record.get('weight_dress'));

        if (record.get('is_white') == 1)
            white.check();
        else
            white.uncheck();

        comment.setValue (record.get('comment'));


        this.get_order_detail_by_id_order(record.get('id_order'));
    },

    get_order_detail_by_id_order: function(id_order) {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'get_order_detail_by_id_order',
                    id_order			:	id_order,
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_order_detail_list (result.order_detail_list);
                }
            });
    },

    update_order_detail_list: function(data) {
        var order_detail_list = this.getOrder_detail_list();
        var order_detail_store = order_detail_list.getStore();

        order_detail_store.setData(data);
        this.update_order_detail_prices();
    },

    update_order_detail_prices: function() {
        var order_detail_store = this.getOrder_detail_list().getStore();

        var record_count = order_detail_store.getCount();

        for (var i = 0; i < record_count; i++)
        {

            var action_fld = this.getId_action_order_field();
            var action_record = action_fld.getStore().findRecord('id_action', action_fld.getValue());
            var client_order_count = this.getAddOrderPanel().order_count;
            var home_weight_price = this.getAddOrderPanel().home_weight_price;
            var dress_weight_price = this.getAddOrderPanel().dress_weight_price;
            var id_order_detail = order_detail_store.getAt(i).get('id_order_detail');

            if (id_order_detail)
                name_dist = 'edit_order';
            else
                name_dist = 'add_order';

            var wear_name = this.create_wear_name_and_calc_result_price_ext (order_detail_store.getAt(i), action_record, client_order_count, home_weight_price, dress_weight_price, name_dist);


            order_detail_store.getAt(i).set('wear_name', wear_name.wear_name);
        }

        this.set_order_msg();
        this.check_weight_is_need();
    },

    get_current_weight_prices: function() {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'get_current_order_price_list',
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_order_price_values (result);
                }
            });


    },

    update_order_price_values: function(data) {
        var add_order_panel = this.getAddOrderPanel();

        for (var next_price in data.current_order_price_list){
            if (data.current_order_price_list[next_price].price_type_name === 'Весовой на домашний текстиль')
            {
                add_order_panel.home_weight_price = data.current_order_price_list[next_price].price;
                add_order_panel.home_weight_result_price = data.current_order_price_list[next_price].price;
            }


            if (data.current_order_price_list[next_price].price_type_name === 'Весовой для одежды')
            {
                add_order_panel.dress_weight_price = data.current_order_price_list[next_price].price;
                add_order_panel.dress_weight_result_price = data.current_order_price_list[next_price].price;
            }

        }

        this.update_order_action_list();
    },

    update_order_prices_by_action: function() {
        var add_order_panel = this.getAddOrderPanel();
        var action_fld = this.getId_action_order_field();
        var action_record = action_fld.getStore().findRecord('id_action', action_fld.getValue());


        if (action_record.get('action_type') == 'На весовой текстиль')
            add_order_panel.home_weight_result_price = action_record.get('action_value') * add_order_panel.home_weight_price;
        else
            add_order_panel.home_weight_result_price = add_order_panel.home_weight_price;

        if (action_record.get('action_type') == 'На весовую одежду')
            add_order_panel.dress_weight_result_price = action_record.get('action_value') * add_order_panel.dress_weight_price;
        else
            add_order_panel.dress_weight_result_price = add_order_panel.dress_weight_price;

        if (action_record.get('action_type') == 'Процентная')
        {
            add_order_panel.home_weight_result_price = action_record.get('action_value') * add_order_panel.home_weight_price;
            add_order_panel.dress_weight_result_price = action_record.get('action_value') * add_order_panel.dress_weight_price;
        }
    },

    update_order_action_list: function() {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'get_current_order_actions',
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_order_action_store (result.current_order_action_list);
                }
            });
    },

    update_order_action_store: function(data) {
        var order_action_list = this.getId_action_order_field();
        order_action_list_store = order_action_list.getStore();


        order_action_list_store.data.clear();
        order_action_list_store.setData(data);


        var add_order_panel = this.getAddOrderPanel();

        if (add_order_panel.target == 'edit_order')
            this.get_client_order_count (add_order_panel.record.get('id_client'));
        else
            this.set_order_msg();



    },

    get_client_order_count: function(id_client) {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name	: 'get_client_order_count',
                    id_client		: id_client,
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {

                    var add_order_panel = t.getAddOrderPanel();

                    t.getAddOrderPanel().order_count = (result.order_count);
                    t.getId_add_dress().setDisabled(false);

                    if (add_order_panel.target == 'edit_order')
                    {
                        var create_order_btn = t.getId_create_order_btn();
                        create_order_btn.setText('OK');
                        t.load_order_data_to_form (add_order_panel.record, add_order_panel.client_name);

                    }
                    else
                        t.update_order_detail_prices();

                    t.set_order_msg();

                }
            });
    },

    close_add_order_form: function() {
        var add_order_panel = this.getAddOrderPanel();

        var order_detail_store = this.getOrder_detail_list().getStore();
        order_detail_store.data.clear();

        add_order_panel.destroy();


        //this.getApplication().getController('client_panel_controller').update_client_list();
    },

    set_client_name: function(client_name, id_client) {
        var client_field = this.getClient_field();

        client_field.setValue(client_name);
        client_field.id_client = id_client;

        this.get_client_order_count(id_client);

        this.check_all_fields();
    },

    check_all_fields: function() {
        var client = this.getClient_field().getValue();
        var ticket_number = this.getTicket_number_field().getValue();
        var container_count = this.getContainer_count_field().getValue();
        var white = this.getWhite_field().getChecked();
        var comment = this.getComment_field().getValue();

        var weight_home = this.getWeight_field().getValue();
        var weight_dress = this.getWeight_dress_field().getValue();
        var order_detail_info = this.get_order_detail_info();


        var order_detail_list_store = this.getOrder_detail_list().getStore();
        var order_detail_count = order_detail_list_store.getCount();


        if (order_detail_info.is_dress_weight && (weight_dress === 0 || weight_dress === null)){
            this.set_buttons_disable (true);
            return;
        }



        if (order_detail_info.is_home_weight && (weight_home === 0 || weight_home === null)){
            this.set_buttons_disable (true);
            return;
        }




        if (client && ((ticket_number > 0 && white) || !white)  && order_detail_count > 0 && container_count > 0)
            this.set_buttons_disable (false);
        else
            this.set_buttons_disable (true);




        this.set_order_msg();
    },

    check_weight_is_need: function() {
        var order_detail_store = this.getOrder_detail_list().getStore();
        var record_count = order_detail_store.getCount();


        var is_need_home_weight = false;
        var is_need_dress_weight = false;



        for (var i = 0; i < record_count; i++)
        {

            if (order_detail_store.getAt(i).get('is_home_weight') == 1 && order_detail_store.getAt(i).get('price_type') == 'Весовой')
                is_need_home_weight = true;

            if (order_detail_store.getAt(i).get('is_home_weight') === 0 && order_detail_store.getAt(i).get('price_type') == 'Весовой')
                is_need_dress_weight = true;
        }

        if (!is_need_home_weight)
        {
            this.getWeight_field().setValue("0");
            this.getWeight_field().setDisabled(true);
        }
        else
            this.getWeight_field().setDisabled(false);


        if (!is_need_dress_weight)
        {
            this.getWeight_dress_field().setValue("0");
            this.getWeight_dress_field().setDisabled(true);
        }
        else
            this.getWeight_dress_field().setDisabled(false);
    },

    set_buttons_disable: function(disable) {
        var create_order_btn = this.getId_create_order_btn();
        create_order_btn.setDisabled(disable);
    },

    add_order_detail: function(number, id_item_type_group, id_item_type, is_home_weight, count, id_color, color, id_gender, gender, wear, id_price, price_type, price, id_action, action_name, action_type, action_value, is_lable, item_type_name, comment) {

        var order_detail_list = this.getOrder_detail_list();
        var order_detail_store = order_detail_list.getStore();


        order_detail_store.add({number:number, id_item_type_group:id_item_type_group, id_item_type:id_item_type, is_home_weight:is_home_weight, count:count, id_color:id_color, color:color, id_gender:id_gender, gender:gender, wear:wear, id_price:id_price, price_type:price_type, price:price, id_action:id_action, action_name:action_name, action_type:action_type, action_value:action_value, is_lable:is_lable, comment:comment, item_type_name:item_type_name});

        this.set_buttons_disable(false);
        this.update_order_detail_prices();
        this.check_weight_is_need();
        this.check_all_fields();
        this.set_order_msg();
    },

    edit_order_detail: function(number, id_item_type_group, id_item_type, is_home_weight, count, id_color, color, id_gender, gender, wear, id_price, price_type, price, id_action, action_name, action_type, action_value, is_lable, item_type_name, comment, remove_record) {
        var order_detail_list = this.getOrder_detail_list();
        var order_detail_store = order_detail_list.getStore();

        //order_detail_store.remove (remove_record);


        remove_record.set('number', number);
        remove_record.set('id_item_type_group', id_item_type_group);
        remove_record.set('id_item_type', id_item_type);
        remove_record.set('is_home_weight', is_home_weight);
        remove_record.set('count', count);
        remove_record.set('id_color', id_color);
        remove_record.set('color', color);
        remove_record.set('id_gender', id_gender);
        remove_record.set('gender', gender);
        remove_record.set('wear', wear);
        remove_record.set('id_price', id_price);
        remove_record.set('price_type', price_type);
        remove_record.set('price', price);
        remove_record.set('id_action', id_action);
        remove_record.set('action_name', action_name);
        remove_record.set('action_type', action_type);
        remove_record.set('action_value', action_value);
        remove_record.set('is_lable', is_lable);
        remove_record.set('comment', comment);
        remove_record.set('item_type_name', item_type_name);


        //order_detail_store.add({number:number, id_item_type_group:id_item_type_group, id_item_type:id_item_type, is_home_weight:is_home_weight, count:count, id_color:id_color, color:color, id_gender:id_gender, gender:gender, wear:wear, id_price:id_price, price_type:price_type, price:price, id_action:id_action, action_name:action_name, action_type:action_type, action_value:action_value, is_lable:is_lable, comment:comment, item_type_name:item_type_name});

        this.set_buttons_disable(false);
        this.update_order_detail_prices();
        this.check_weight_is_need();
        this.set_order_msg();
    },

    add_order_to_base_and_close_window: function() {
        var id_client = this.getClient_field().id_client;
        var container_count = this.getContainer_count_field().getValue();
        var weight_home = this.getWeight_field().getValue();
        var weight_dress = this.getWeight_dress_field().getValue();
        var ticket_number = this.getTicket_number_field().getValue();
        var id_action_ = this.getId_action_order_field().getValue();
        var id_action = 0;

        if (id_action_)
            id_action = id_action_;


        var is_white_ = this.getWhite_field().getChecked();
        var is_white = 0;
        if (is_white_)
            is_white = 1;

        var comment = this.getComment_field().getValue();



        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'add_order',
                    id_client			:	id_client,
                    container_count		:	container_count,
                    weight_home			:	weight_home,
                    weight_dress		:	weight_dress,
                    ticket_number		:	ticket_number,
                    id_action			:	id_action,
                    is_white			:	is_white,
                    comment				:	comment,
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.add_order_detailes_to_base (result.id_order);
                }
            });





    },

    add_order_detailes_to_base: function(id_order) {




        var t = this;
        var order_detail_store = this.getOrder_detail_list().getStore();
        var record_count = order_detail_store.getCount();

        for (var i = 0; i < record_count; i++)
        {

            var id_item_type = order_detail_store.getAt(i).get('id_item_type');
            var id_action = order_detail_store.getAt(i).get('id_action');
            var id_color = order_detail_store.getAt(i).get('id_color');
            var id_gender = order_detail_store.getAt(i).get('id_gender');
            var wear = order_detail_store.getAt(i).get('wear');
            var count = order_detail_store.getAt(i).get('count');
            var id_price = order_detail_store.getAt(i).get('id_price');
            var is_label = order_detail_store.getAt(i).get('is_lable');
            var comment = order_detail_store.getAt(i).get('comment');


            t.add_order_detail_to_base (id_order, id_item_type, id_action, id_color, id_gender, wear, count, id_price, is_label, comment);
        }


        order_detail_store.data.clear();


        Ext.Msg.alert('Iron', "Заказ добавлен");


        var add_order_panel = this.getAddOrderPanel();
        add_order_panel.destroy();


        this.getApplication().getController('order_panel_controller').update_order_list();
    },

    add_order_detail_to_base: function(id_order, id_item_type, id_action, id_color, id_gender, wear, count, id_price, is_label, comment) {

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'add_order_detail',
                    id_order			:	id_order,
                    id_item_type		:	id_item_type,
                    id_action			:	id_action,
                    id_color			:	id_color,
                    id_gender			:	id_gender,
                    wear				:	wear,
                    count				:	count,
                    id_price			:	id_price,
                    is_label			:	is_label,
                    comment				:	comment,
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    //console.log(result.id_order_detail);
                }
            });
    },

    update_order_to_base_and_close_window: function() {
        var id_client = this.getClient_field().id_client;
        var container_count = this.getContainer_count_field().getValue();

        var weight_home = this.getWeight_field().getValue();
        if (this.getWeight_field().getDisabled())
            weight_home = 0;

        var weight_dress = this.getWeight_dress_field().getValue();
        if (this.getWeight_dress_field().getDisabled())
            weight_dress = 0;


        var ticket_number = this.getTicket_number_field().getValue();

        var id_action_ = this.getId_action_order_field().getValue();
        var id_action = 0;

        if (id_action_)
            id_action = id_action_;


        var is_white_ = this.getWhite_field().getChecked();
        var is_white = 0;
        if (is_white_)
            is_white = 1;

        var comment = this.getComment_field().getValue();
        var id_order = this.getAddOrderPanel().record.get('id_order');


        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'update_order',
                    id_order			:	id_order,
                    id_client			:	id_client,
                    container_count		:	container_count,
                    weight_home			:	weight_home,
                    weight_dress		:	weight_dress,
                    ticket_number		:	ticket_number,
                    id_action			:	id_action,
                    is_white			:	is_white,
                    comment				:	comment,
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_order_detailes_in_base (id_order);
                }
            });





    },

    update_order_detailes_in_base: function(id_order) {
        var order_detail_store = this.getOrder_detail_list().getStore();
        var record_count = order_detail_store.getCount();


        for (var i = 0; i< this.removed_records.length; i++)
            this.delete_order_detail_from_base (this.removed_records[i].get('id_order_detail'));

        for (var i = 0; i < record_count; i++)
        {

            var id_order_detail = order_detail_store.getAt(i).get('id_order_detail');
            var id_item_type = order_detail_store.getAt(i).get('id_item_type');
            var id_action = order_detail_store.getAt(i).get('id_action');
            var id_color = order_detail_store.getAt(i).get('id_color');
            var id_gender = order_detail_store.getAt(i).get('id_gender');
            var wear = order_detail_store.getAt(i).get('wear');
            var count = order_detail_store.getAt(i).get('count');
            var id_price = order_detail_store.getAt(i).get('id_price');
            var is_label = order_detail_store.getAt(i).get('is_lable');
            var comment = order_detail_store.getAt(i).get('comment');


            if (id_order_detail)
                this.update_order_detail_to_base (id_order_detail, id_item_type, id_action, id_color, id_gender, wear, count, id_price, is_label, comment);
            else
                this.add_order_detail_to_base (id_order, id_item_type, id_action, id_color, id_gender, wear, count, id_price, is_label, comment);
        }


        order_detail_store.data.clear();


        Ext.Msg.alert('Iron', "Заказ обновлен");


        var add_order_panel = this.getAddOrderPanel();
        add_order_panel.destroy();


        this.getApplication().getController('order_panel_controller').update_order_list();
    },

    update_order_detail_to_base: function(id_order_detail, id_item_type, id_action, id_color, id_gender, wear, count, id_price, is_label, comment) {

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'update_order_detail',
                    id_order_detail		:	id_order_detail,
                    id_item_type		:	id_item_type,
                    id_action			:	id_action,
                    id_color			:	id_color,
                    id_gender			:	id_gender,
                    wear				:	wear,
                    count				:	count,
                    id_price			:	id_price,
                    is_label			:	is_label,
                    comment				:	comment,
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    //console.log(result.id_order_detail);
                }
            });
    },

    delete_order_detail_from_base: function(id_order_detail, comment) {

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'delete_order_detail',
                    id_order_detail		:	id_order_detail,
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    //console.log(result.id_order_detail);
                }
            });
    },

    get_order_detail_count: function() {
        var order_detail_list = this.getOrder_detail_list();
        var order_detail_store = order_detail_list.getStore();

        return order_detail_store.getCount();
    },

    get_order_detail_info: function() {
        var order_detail_list = this.getOrder_detail_list();
        var order_detail_store = order_detail_list.getStore();
        var order_detail_count = order_detail_store.getCount();

        var is_dress_weight = false;
        var weight_dress_price = 0;

        var is_home_weight = false;
        var weight_home_price = 0;

        var is_simple_item = false;
        var no_weight_item_sum = 0;
        var no_weight_item_discount = 0;
        var no_weight_item_wo_disc = 0;

        for (var i = 0; i < order_detail_count; i++){
            var next = order_detail_store.getAt (i);

            // домашний текстиль с весовым прайсом хотя бы один
            if (next.get('is_home_weight') === 1 && next.get('price_type') == 'Весовой')
                is_home_weight = true;



            // не домашний текстиль с весовым прайсом хотя бы один
            if (next.get('is_home_weight') === 0 && next.get('price_type') == 'Весовой')
                is_dress_weight = true;



            // сумма заказа на штучный
            if (next.get('price_type') == 'Штучный'){
                no_weight_item_sum += next.get('result_price') * next.get('count');
            }


            // сумма зазказа на штучный без скидки
            if (next.get('price_type') == 'Штучный'){
                no_weight_item_wo_disc += next.get('price') * next.get('count');
            }

            // сумма скидки
            if (next.get('price_type') == 'Штучный'){
                no_weight_item_discount += (next.get('price') - next.get('result_price')) * next.get('count');
            }


        }

        return {is_dress_weight:is_dress_weight, is_home_weight:is_home_weight, no_weight_item_sum:no_weight_item_sum, no_weight_item_discount:no_weight_item_discount, no_weight_item_wo_disc:no_weight_item_wo_disc};
    },

    set_order_msg: function() {
        var tip_lbl = this.getId_tip ();
        var client_field = this.getClient_field();
        var order_detail_list = this.getOrder_detail_list();
        var order_detail_store = order_detail_list.getStore();
        var weight_home = this.getWeight_field().getValue();
        var weight_dress = this.getWeight_dress_field().getValue();
        var container_count = this.getContainer_count_field().getValue();
        var ticket_number = this.getTicket_number_field().getValue();

        var order_detail_info = this.get_order_detail_info();
        var is_can_calc = false;

        var text = '<div> <font size="3" color="white"> Для рассчета стоимости: </font> </div>';

        var client_selected = true;
        var order_detail_is = true;
        var dress_weight_is = true;
        var home_weight_is = true;


        var add_order_panel = this.getAddOrderPanel();


        if (client_field.getValue() === ''){
            text += '<font size="3" color="red"> Выберите клиента; </font>';
            client_selected = false;
        }

        if (order_detail_store.getCount() === 0){
            text +=  '<font size="3" color="red"> Добавьте позиции одежды; </font>';
            order_detail_is = false;
        }


        if (order_detail_info.is_dress_weight && (weight_dress === 0 || weight_dress === null)){
            text +=  '<font size="3" color="red"> Укажите вес одежды; </font>';
            dress_weight_is = false;
        }



        if (order_detail_info.is_home_weight && (weight_home === 0 || weight_home === null)){
            text +=  '<font size="3" color="red"> Укажите вес текстиля; </font>';
            home_weight_is = false;
        }


        if (container_count === 0 || container_count === null)
            text +=  '<font size="3" color="red"> Укажите число контейнеров; </font>';


        if (ticket_number === 0 || ticket_number === null)
            text +=  '<font size="3" color="red"> Укажите номер квитанции; </font>';



        if (client_selected && order_detail_is && dress_weight_is && home_weight_is){

            var weight_discount = 0;

            var weight_home_items_sum = 0;
            var weight_home_items_sum_wo_disc = 0;

            if (order_detail_info.is_home_weight)
            {
                weight_home_items_sum = add_order_panel.home_weight_result_price * weight_home;
                weight_home_items_sum_wo_disc = add_order_panel.home_weight_price * weight_home;
                weight_discount += (add_order_panel.home_weight_price - add_order_panel.home_weight_result_price) * weight_home;
            }




            var weight_dress_items_sum = 0;
            var weight_dress_items_sum_wo_disc = 0;

            if (order_detail_info.is_dress_weight)
            {
                weight_dress_items_sum = add_order_panel.dress_weight_result_price * weight_dress;
                weight_dress_items_sum_wo_disc = add_order_panel.dress_weight_price * weight_dress;
                weight_discount += (add_order_panel.dress_weight_price - add_order_panel.dress_weight_result_price) * weight_dress;
            }





            var total_sum = weight_home_items_sum + weight_dress_items_sum + order_detail_info.no_weight_item_sum;


            var total_sum_wo_disc = weight_home_items_sum_wo_disc + weight_dress_items_sum_wo_disc + order_detail_info.no_weight_item_wo_disc;
            var total_discount = order_detail_info.no_weight_item_discount + weight_discount;

            text = '<div> <font size="2" color="white"> Общая сумма заказа: </font> <font size="3" color="yellow">' + Math.floor(total_sum/10)*10 + ' руб.: </div> </font> ' +
                    '<font size="2" color="yellow"> Поштучно: ' + order_detail_info.no_weight_item_sum + ' руб.; </font>' +
                    '<font size="2" color="yellow"> Весовая одежда: ' + parseFloat(weight_dress_items_sum.toFixed(2)) + ' руб.; </font>' +
                    '<font size="2" color="yellow"> Весовой текстиль: ' + parseFloat(weight_home_items_sum.toFixed(2)) + ' руб.; </font>' +
                    '<font size="2" color="yellow"> Итоговая скидка (без учета округления): ' + parseFloat(total_discount.toFixed(2)) + ' руб. или ' + parseFloat(((total_discount/total_sum_wo_disc)*100).toFixed(1)) + '% </font>';




            tip_lbl.setHtml(text);
        }
        else
            tip_lbl.setHtml(text);
    },

    create_wear_name_and_calc_result_price_ext: function(record, action_record, order_count, home_weight_price, dress_weight_price, name_dist) {


        this.update_record_price_data(record, action_record, order_count, home_weight_price, dress_weight_price, name_dist);

        /* создаем наименование для типа просмотра */
        var wear_name = this.set_record_wear_name (record, home_weight_price, dress_weight_price, name_dist);
        var price_dimension = record.get('price_dimension');
        var result_action = record.get('result_action_name');
        var discount = record.get('discount');
        var result_price = record.get('result_price');
        var price = record.get('price');

        wear_name += " ** Цена: " + price.toFixed(2) + " " + price_dimension + " **";


        if (result_action !== ' ')
            wear_name +=  " Акция: " + result_action + "; Скидка: " + discount + "%; ** Итоговая цена: " + result_price  + " " + price_dimension + " **";




        return {wear_name:wear_name, record:record};
    },

    set_record_wear_name: function(record, home_weight_price, dress_weight_price, name_dist) {
        var is_item_home_weight = record.get('is_home_weight');
        var item_price_type = record.get('price_type');
        var item_type_name = record.get('item_type_name');
        var item_gender = record.get('gender');
        var item_color = record.get('color');
        var item_count = record.get('count');
        var item_with_lable = record.get('is_lable');
        var item_hanger = record.get('hanger');

        if (item_with_lable)
            var item_with_lable_text = "; c маркировкой";
        else
            var item_with_lable_text = "; без маркировки";


        if (item_hanger)
            var item_hanger_text = record.get('count').toString()  + 'Ω';
        else
            var item_hanger_text = record.get('count').toString() + '_';

        /* Для договора */
        if (name_dist == 'create_contract')
        {
            var wear_name = item_hanger_text + " " + item_type_name + " (" + item_gender + "; " + item_color;

            if (is_item_home_weight === 1)
                wear_name = item_hanger_text + " " + item_type_name + " (" + item_color;

            if (item_price_type == "Штучный")
                wear_name += "; " + item_count + " шт.";


            if (item_price_type == "Весовой" && is_item_home_weight === 0)
                wear_name += "; весовая одежда";


            if (item_price_type == "Весовой" && is_item_home_weight === 1)
                wear_name += "; весовой текстиль" ;

            wear_name += item_with_lable_text + " ";

        }
        /* Для панели просмотра заказов */
        else if (name_dist == 'add_order' || name_dist == 'edit_order')
        {
            var wear_name = item_type_name + " (" + item_gender + "; " + item_color;

            if (is_item_home_weight === 1)
                wear_name = item_type_name + " (" + item_color;

            if (item_price_type == "Штучный")
                wear_name += "; " + item_count + " шт.";


            if (item_price_type == "Весовой" && is_item_home_weight === 0)
                wear_name += "; весовая одежда";


            if (item_price_type == "Весовой" && is_item_home_weight === 1)
                wear_name += "; весовой текстиль" ;



        }
        /* остальные */
        else
        {
            var wear_name = item_type_name + " (" + item_gender + "; " + item_color;

            if (is_item_home_weight === 1)
                wear_name = item_type_name + " (" + item_color;

            if (item_price_type == "Штучный")
                wear_name += "; " + item_count + " шт.";


            if (item_price_type == "Весовой" && is_item_home_weight === 0)
                wear_name += "; весовая одежда";


            if (item_price_type == "Весовой" && is_item_home_weight === 1)
                wear_name += "; весовой текстиль" ;
        }



        wear_name += ")";

        record.set('wear_name', wear_name);

        return wear_name;
    },

    update_record_price_data: function(record, action_record, order_count, home_weight_price, dress_weight_price, name_dist) {
        var item_price_type = record.get('price_type');


        if (item_price_type == "Штучный")
        {
            record.set('price_dimension', 'руб./шт.');
            this.set_result_price_for_peace_item (record, action_record, order_count, name_dist);
        }

        else
        {
            record.set('price_dimension', 'руб./кг.');
            this.set_result_price_for_home_weight_item (record, action_record, home_weight_price, dress_weight_price);
        }

    },

    set_result_price_for_peace_item: function(record, action_record, order_count, name_dist) {
        var item_price = record.get('price');
        var item_action_name = record.get('action_name');
        var item_action_type = record.get('action_type');
        var item_acton_value = record.get('action_value');



        /* если есть глобальные акции */
        //if (action_record && order_action_name !== ' ')
        if (action_record && action_record.get('action_name') !== ' ')
        {
            var order_action_name = action_record.get('action_name');
            var order_action_type = action_record.get('action_type');
            var order_action_value = action_record.get('action_value');


            var discount = 0;
            var result_price = 0;

            /*Если есть глобальная процентная акция*/
            if (order_action_type == 'Процентная')
            {
                discount = Math.ceil (((item_price * (1-order_action_value))/item_price)*100);
                result_price = parseFloat((item_price * order_action_value).toFixed(2));

                var result_data = this.comp_prices (item_price, result_price, discount, order_action_name);


                record.set('result_price', result_data.result_price);
                record.set('discount', result_data.discount);
                record.set('result_action_name', result_data.action_name);
            }
            /* иначе считаем цену с учетом локальной акции
                пока что эта ветка не сработает, так как кроме процентных глобальных акций ничего нет*/
            else
                this.set_result_price_for_peace_item_with_local_action (record, order_count, name_dist);
        }
        /* иначе считаем цену с учетом локальной акции */
        else
            this.set_result_price_for_peace_item_with_local_action (record, order_count, name_dist);

    },

    set_result_price_for_peace_item_with_local_action: function(record, order_count, name_dist) {
        var item_price = record.get('price');
        var item_action_name = record.get('action_name');
        var item_action_type = record.get('action_type');
        var item_acton_value = record.get('action_value');




        /* или первый контакт и его можно применять, или просто акция */
        if (item_action_name != ' ' && ((item_action_name == 'первый контакт' && order_count < 1000 && name_dist == 'add_order') || (item_action_name !== 'первый контакт' && name_dist == 'add_order') || (item_action_name !== '' && (name_dist == 'edit_order' || name_dist == 'create_contract'))))
        {

            if (item_action_type == 'Рублевая')
            {
                var discount = Math.ceil (((item_price - item_acton_value)/item_price)*100);
                var result_price = item_acton_value;

            }
            else if (item_action_type == 'Процентная')
            {
                var discount = Math.ceil (((item_price * (1-item_acton_value))/item_price)*100);
                var result_price = parseFloat((item_price * item_acton_value).toFixed(2));
            }

            var result_data = this.comp_prices (item_price, result_price, discount, item_action_name);


            record.set('result_price', result_data.result_price);
            record.set('discount', result_data.discount);
            record.set('result_action_name', result_data.action_name);
        }
        else
        {
            record.set('result_price', item_price);
            record.set('discount', 0);
            record.set('result_action_name', ' ');
            record.set('id_action', 0);
        }
    },

    comp_prices: function(price, result_price, discount, action_name) {

        if (result_price > price)
            return {result_price:price, discount:0, action_name:' '};
        else
            return {result_price:result_price, discount:discount, action_name:action_name};
    },

    set_result_price_for_home_weight_item: function(record, action_record, home_weight_price, dress_weight_price) {

        var is_item_home_weight = record.get('is_home_weight');


        if (is_item_home_weight == 1)
            var item_price = home_weight_price;
        else
            var item_price = dress_weight_price;

        var is_item_home_weight = record.get('is_home_weight');





        //if (action_record && order_action_name !== ' ')
        if (action_record && action_record.get('action_name') !== ' ')
        {
            var order_action_name = action_record.get('action_name');
            var order_action_type = action_record.get('action_type');
            var order_action_value = action_record.get('action_value');




            if (order_action_type == 'На весовой текстиль' && is_item_home_weight == 1)
            {
                discount = Math.ceil(((home_weight_price * (1-order_action_value))/home_weight_price)*100);
                result_price = parseFloat((home_weight_price * order_action_value).toFixed(2));

                record.set('price', home_weight_price);
                record.set('result_price', result_price);
                record.set('discount', discount);
                record.set('result_action_name', order_action_name);
            }
            else if (order_action_type == 'На весовую одежду' && is_item_home_weight != 1)
            {
                discount = Math.ceil(((dress_weight_price * (1-order_action_value))/dress_weight_price)*100);
                result_price = parseFloat((dress_weight_price * order_action_value).toFixed(2));

                record.set('price', dress_weight_price);
                record.set('result_price', result_price);
                record.set('discount', discount);
                record.set('result_action_name', order_action_name);
            }
            else if (order_action_type == 'Процентная')
            {

                discount = Math.ceil(((item_price * (1-order_action_value))/item_price)*100);
                result_price = parseFloat((item_price * order_action_value).toFixed(2));

                record.set('price', item_price);
                record.set('result_price', result_price);
                record.set('discount', discount);
                record.set('result_action_name', order_action_name);
            }
            else
                this.set_result_price_zero_discount (record, item_price);
        }
        else
            this.set_result_price_zero_discount (record, item_price);

    },

    set_result_price_zero_discount: function(record, item_price) {
        record.set('price', item_price);
        record.set('result_price', item_price);
        record.set('discount', 0);
        record.set('result_action_name', ' ');
        record.set('id_action', 0);
    },

    getXmlHttp: function() {
        var xmlhttp;
            try {
                xmlhttp = new ActiveXObject("Msxml2.XMLHTTP");
            } catch (e) {
                try {
                    xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
                } catch (E) {
                    xmlhttp = false;
                }
            }
            if (!xmlhttp && typeof XMLHttpRequest != 'undefined') {
                xmlhttp = new XMLHttpRequest();
            }
            return xmlhttp;

    }

});