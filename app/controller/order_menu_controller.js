/*
 * File: app/controller/order_menu_controller.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Iron.controller.order_menu_controller', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            addOrderPanel: 'panel#addOrderPanel',
            addOrderMenu: 'panel#addorderMenu',
            select_client_button: 'button#select_client_button',
            cancel_client_button: 'button#cancel_button',
            create_docs_button: 'button#create_docs',
            create_lines_button: 'button#create_lines'
        },

        control: {
            "panel#addorderMenu button[itemId=id_select_client]": {
                tap: 'select_client'
            },
            "panel#addorderMenu button[itemId=create_contract]": {
                tap: 'create_contract_tap'
            },
            "panel#addorderMenu button[itemId=create_docs]": {
                tap: 'create_docs_tap'
            },
            "panel#addorderMenu button[itemId=create_lines]": {
                tap: 'create_lines_tap'
            },
            "panel#addorderMenu button[itemId=create_lines_container_stickers]": {
                tap: 'create_stickers_tap'
            }
        }
    },

    select_client: function(button, e, eOpts) {
        navView = button.getInitialConfig().navView;
        navViewItemId = button.getInitialConfig().navViewItemId;


        client_panel = Ext.create ('widget.' + navView);
        client_panel.setModal(true);
        client_panel.setCentered(true);
        client_panel.source = 'add_order_panel';
        Ext.Viewport.add (client_panel);
        client_panel.show ();




        var select_client_btn = this.getSelect_client_button();
        select_client_btn.setHidden(false);

        var cancle_client_btn = this.getCancel_client_button();
        cancle_client_btn.setHidden(false);



        client_panel.setWidth(980);

        this.getAddOrderMenu().destroy();
    },

    create_contract_tap: function(button, e, eOpts) {
        this.create_contract();
    },

    create_docs_tap: function(button, e, eOpts) {
        this.create_docs();
    },

    create_lines_tap: function(button, e, eOpts) {
        var t = this;

        Ext.Msg.prompt('Iron', 'Введите количество', function(button, value) {

            if (button == 'ok')
                t.create_lines (parseInt(value,10));
        });


    },

    create_stickers_tap: function(button, e, eOpts) {
        var t = this;

        Ext.Msg.prompt('Iron', 'Введите количество', function(button, count) {

            if (button == 'ok')
            {
                Ext.Msg.prompt('Iron', 'Начиная с', function(button_, from) {
                    if (button_ == 'ok')
                    {
                        t.create_stickers (parseInt(count,10), parseInt(from,10));
                    }
                });
            }

        });


    },

    create_contract: function() {
        var t = this;
        var order_record = t.getApplication().getController('order_panel_controller').get_selected_order();
        var action_record = t.getApplication().getController('order_panel_controller').get_selected_order_action();



        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'get_order_detail_by_id_order',
                    id_order			:	order_record.get('id_order'),
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.create_contract_with_items (order_record, result.order_detail_list, action_record);


                    t.getAddOrderMenu().destroy();

                }
            });
    },

    create_contract_with_items: function(order_record, order_details, action_record) {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'get_current_order_price_list',
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    var home_weight_price = 0;
                    var dress_weight_price = 0;
                    var home_weight_result_price = 0;
                    var dress_weight_result_price = 0;

                    var hanger_count = t.calc_hanger_count(order_details);
                    var total_count = t.calc_total_count (order_details);

                    for (var next_price in result.current_order_price_list){
                        if (result.current_order_price_list[next_price].price_type_name === 'Весовой на домашний текстиль')
                            home_weight_price = result.current_order_price_list[next_price].price;

                        if (result.current_order_price_list[next_price].price_type_name === 'Весовой для одежды')
                            dress_weight_price = result.current_order_price_list[next_price].price;
                    }


                    var newWin = window.open('url','windowName','height=800,width=800', 'scrollbars=yes');


                    var client = t.getApplication().getController('order_panel_controller').get_selected_order_client();
                    var date = order_record.get('date_create');

                    var x = '<style type="text/css">TABLE {border-collapse: collapse; border: 1px solid black}TD, TH {padding: 3px; border: 1px solid black;font-size: 10px}</style>';

                    var header_text = '<div><p align="center">Договор № ' + order_record.get('id_order') + ' от ' +  ('0' + date.getDate()).slice(-2) + '.' + ('0' + (date.getMonth() + 1)).slice(-2) + '.' + date.getFullYear() + '</p>';
                    var contract_text = '<p align="left"> <font size="2"> <b> Особые условия выполнения договора по глажке Исполнителем. </b> </font> </p>';
                    var time = '<font size="2"> 1. Срок ответственного хранения выполненного заказа Исполнителем не более 3-х дней. За хранение вещей более 3 дней взимается плата в размере 1% от стоимости заказа, за каждый день хранения.</font>';
                    var task = '<br><font size="2"> 2.	Глажение осуществляется по заданию Заказчика. </font>';
                    var lable = '<br><font size="2"> 3. Изделия с отсутствующей маркировкой, либо имеющие неполную/запрещающую маркировку (символику к обслуживанию) принимаются только с согласия Заказчика. За возможные последствия Исполнитель ответственности не несет. Ответственность за вред, причиненный Заказчику вследствие недостоверной или неполной информации лежит на Изготовителе, либо Продавце изделия (ст. 1095, 1095 ГК РФ). </font>';
                    var strong_wear = '<br><font size="2"> 4. В случае сильного износа и ветхости изделия Исполнитель не может отвечать за возможные механические повреждения в процессе обработки. </font>';
                    var claims = '<br><font size="2"> 5. Претензии по качеству услуги могут быть предъявлены только в момент приема-передачи заказа (ст. 29 Закона «О защите прав потребителей»). Заказчик, принявший изделие без проверки лишается права на претензию и ссылки на недостатки в услуге, которые могли бы быть устранены при приемке вещи (п.3, ст. 720 ГК РФ). </font></div>';

                    var agreement = '<div style="float:left"><br><font size="2"> О неустранимых дефектах, последствиях глаженья, в случае некачественного изготовления изделия фирмой-производителем и недостоверной информацией по уходу за изделием (либо отсутствием таковой) <b>ПРЕДУПРЕЖДЕН</b></font>. <br><font size="2">С правилами приема вещей в гладильню, а также с условиями договора по глаженью изделий, указанных в "Информации для клиентов"</font>';
                    var signatures = '<br><b><font size="2"> ОЗНАКОМЛЕН И СОГЛАСЕН </b>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp________________________/__<ins>' + client.get('surname') + ' ' + client.get('name').substring(0,1) + '.' + client.get('patronymic').substring(0,1) + '</ins>__' ;
                    signatures += '<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<sup>подпись</sup>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<sup>расшифровка</sup>';
                    var signatures_finish = '<br><font size="2"> Качество работы (услуги), сохранность, исходную форму и целостность <b>ПРОВЕРИЛ</b></font>.<br><font size="2">Заказ получил, претензий к качеству услуги <b>НЕ ИМЕЮ</b></font> &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp________________________/__<ins>' + client.get('surname') + ' ' + client.get('name').substring(0,1) + '.' + client.get('patronymic').substring(0,1) + '</ins>__';
                    signatures_finish += '<br>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<sup>подпись</sup>&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp<sup>расшифровка</sup></div>';

                    var no_weight_table = t.create_no_weight_html_table(order_record, order_details, action_record, home_weight_price, dress_weight_price);
                    var weight_home_table = t.create_home_weight_html_table (order_record, order_details, action_record, home_weight_price, dress_weight_price);
                    var weight_dress_table = t.create_dress_weight_html_table (order_record, order_details, action_record, home_weight_price, dress_weight_price);
                    var result_table = t.create_result_html_table (no_weight_table.result_sum, weight_home_table.result_sum, weight_dress_table.result_sum, hanger_count, total_count);




                    newWin.document.write(x + header_text + contract_text + time + task + lable + strong_wear + claims + '<br>' + no_weight_table.table + '<br>' + weight_home_table.table + '<br>'+  weight_dress_table.table + '<br>' + result_table + '<br>' + agreement + '<br>' + signatures + '<br>' + signatures_finish);


                }
            });
    },

    create_no_weight_html_table: function(order_record, order_details, action_record, home_weight_price, dress_weight_price) {
        var result_sum = 0;
        var result_count = 0;

        var with_no_weight_items = false;

        for (var next_detail in order_details)
        {
            var record  = Ext.create('Iron.model.order_detail_model');
            record.setData(order_details[next_detail]);

            if (record.get('price_type') == "Штучный")
            {
                with_no_weight_items = true;
                break;
            }
        }

        if (!with_no_weight_items)
            return {table:'', result_sum:result_sum};




        var table = '<div> <table border="1" frame="above"> <caption><font size="2">Список штучных позиций</font></caption> <tr> <th>Наименование</th> <th>Кол.</th> <th>Износ</th> <th>Цена</th> <th>Акция</th> <th>Скидка</th> <th>Итоговая цена</th> <th>Сумма</th> <th>Комментарии</th> </tr>';





        for (var next_detail in order_details)
        {
            var record  = Ext.create('Iron.model.order_detail_model');
            record.setData(order_details[next_detail]);
            record.set('home_weight_price', home_weight_price);
            record.set('dress_weight_price', dress_weight_price);


            var x = this.getApplication().getController('add_order_panel_controller').create_wear_name_and_calc_result_price_ext (record, action_record, 1, home_weight_price, dress_weight_price, 'create_contract');

            if (x.record.get('price_type') == "Штучный")
            {
                table += '<tr><td> ' + x.record.get('wear_name') + '</td>';
                table += '<td> ' + x.record.get('count') + '</td>';
                table += '<td> ' + x.record.get('wear') + '%</td>';
                table += '<td> ' + x.record.get('price') + ' руб./шт.</td>';
                table += '<td> ' + x.record.get('result_action_name') + '</td>';
                table += '<td> ' + x.record.get('discount') + '% </td>';
                table += '<td> ' + x.record.get('result_price') + ' руб./шт.</td>';
                table += '<td> ' + x.record.get('result_price')  * x.record.get('count') + ' руб./шт.</td>';
                table += '<td> ' + x.record.get('comment') + '</td></tr>';

                result_sum += x.record.get('result_price')  * x.record.get('count');
                result_count += x.record.get('count');
            }
        }

        table += '<tr><th align="left">Итого:</th> <th align="left">' + result_count + '</th> <th align="left">--</th> <th align="left">--</th> <th align="left">--</th> <th align="left">--</th> <th align="left">--</th>  <th align="left">' + result_sum + ' руб. </th> <th align="left">--</th> <tr>';

        table += '</table></div>';

        return {table:table, result_sum:result_sum};
    },

    create_home_weight_html_table: function(order_record, order_details, action_record, home_weight_price, dress_weight_price) {
        var result_sum = 0;

        var with_weight_items = false;

        for (var next_detail in order_details)
        {
            var record  = Ext.create('Iron.model.order_detail_model');
            record.setData(order_details[next_detail]);

            if (record.get('price_type') == "Весовой" && record.get('is_home_weight') == 1)
            {
                with_weight_items = true;
                break;
            }
        }

        if (!with_weight_items)
            return {table:'', result_sum:result_sum};





        var table = '<div> <table border="1"> <caption><font size="2">Список весовых позиций (домашний текстиль) </font></caption> <tr> <th>Наименование</th> <th>Кол.</th> <th>Вес</th> <th>Износ</th> <th>Цена за кг.</th> <th>Акция</th> <th>Скидка</th> <th>Итоговая цена</th> <th>Комментарии</th> </tr>';
        var result_home_weight = 0;
        var result_dress_weight = 0;

        var result_home_weight_price = home_weight_price;
        var result_dress_weight_price = dress_weight_price;
        var result_home_weight_count = 0;



        for (var next_detail in order_details)
        {
            var record  = Ext.create('Iron.model.order_detail_model');
            record.setData(order_details[next_detail]);
            record.set('home_weight_price', home_weight_price);
            record.set('dress_weight_price', dress_weight_price);

            var x = this.getApplication().getController('add_order_panel_controller').create_wear_name_and_calc_result_price_ext (record, action_record, 1, home_weight_price, dress_weight_price, 'create_contract');

            if (x.record.get('price_type') == "Весовой" && x.record.get('is_home_weight') == 1)
            {
                table += '<tr><td>' + x.record.get('wear_name') + '</td>';
                table += '<td>' + x.record.get('count') + '</td>';
                table += '<td>--</td>';
                table += '<td>' + x.record.get('wear') + '%</td>';
                table += '<td>' + home_weight_price + ' руб./кг.</td>';
                table += '<td>' + x.record.get('result_action_name') + '</td>';
                table += '<td>' + x.record.get('discount') + '% </td>';
                table += '<td>' + x.record.get('result_price') + ' руб./кг.</td>';
                result_home_weight_price = x.record.get('result_price');
                result_home_weight_count += x.record.get('count');
                table += '<td>' + x.record.get('comment') + '</td></tr>';

            }
        }

        var result_sum = (order_record.get('weight_home') * result_home_weight_price) + (order_record.get('weight_dress') * result_dress_weight_price);



        table += '<tr><th align="left">Итого:</th> <th align="left">' + result_home_weight_count + 'шт.<th align="left">' + order_record.get('weight_home') + ' кг. </th> <th align="left">--</th> <th align="left">--</th> <th align="left">--</th> <th align="left">--</th> <th>' + result_sum + ' руб. </th> <th align="left">--</th> <tr>';



        table += '</table></div>';

        return {table:table, result_sum:result_sum};
    },

    create_dress_weight_html_table: function(order_record, order_details, action_record, home_weight_price, dress_weight_price) {
        var result_sum = 0;

        var with_weight_items = false;

        for (var next_detail in order_details)
        {
            var record  = Ext.create('Iron.model.order_detail_model');
            record.setData(order_details[next_detail]);

            if (record.get('price_type') == "Весовой" && record.get('is_home_weight') === 0)
            {
                with_weight_items = true;
                break;
            }
        }

        if (!with_weight_items)
            return {table:'', result_sum:result_sum};





        var table = '<div> <table border="1"> <caption><font size="2">Список весовых позиций (одежда) </font></caption> <tr> <th>Наименование</th> <th>Кол</th> <th>Вес</th> <th>Износ</th> <th>Цена за кг.</th> <th>Акция</th> <th>Скидка</th> <th>Итоговая цена</th> <th>Комментарии</th> </tr>';
        var result_home_weight = 0;
        var result_dress_weight = 0;

        var result_home_weight_price = home_weight_price;
        var result_dress_weight_price = dress_weight_price;
        var result_dress_weight_count = 0;




        for (var next_detail in order_details)
        {
            var record  = Ext.create('Iron.model.order_detail_model');
            record.setData(order_details[next_detail]);
            record.set('home_weight_price', home_weight_price);
            record.set('dress_weight_price', dress_weight_price);

            var x = this.getApplication().getController('add_order_panel_controller').create_wear_name_and_calc_result_price_ext (record, action_record, 1, home_weight_price, dress_weight_price, 'create_contract');

            if (x.record.get('price_type') == "Весовой" && x.record.get('is_home_weight') === 0)
            {
                table += '<tr><td>' + x.record.get('wear_name') + '</td>';
                table += '<td>' + x.record.get('count') + '</td>';
                table += '<td>--</td>';
                table += '<td>' + x.record.get('wear') + '%</td>';
                table += '<td>' + dress_weight_price + ' руб./кг.</td>';
                table += '<td>' + x.record.get('result_action_name') + '</td>';
                table += '<td>' + x.record.get('discount') + '% </td>';
                table += '<td>' + x.record.get('result_price') + ' руб./кг.</td>';
                result_home_weight_price = x.record.get('result_price');
                result_dress_weight_count += x.record.get('count');
                table += '<td>' + x.record.get('comment') + '</td></tr>';

            }
        }

        var result_sum = (order_record.get('weight_home') * result_home_weight_price) + (order_record.get('weight_dress') * result_dress_weight_price);


        table += '<tr><th align="left">Итого:</th> <th align="left">' + result_dress_weight_count + ' шт. </th> <th align="left">' + order_record.get('weight_dress') + ' кг. </th> <th align="left">--</th> <th align="left">--</th> <th align="left">--</th> <th align="left">--</th> <th>' + result_sum + ' руб. </th> <th align="left">--</th> <tr>';



        table += '</table></div>';

        return {table:table, result_sum:result_sum};
    },

    create_result_html_table: function(no_weight_item_sum, weight_home_item_sum, weight_dress_item_sum, hanger_count, total_count) {
        var hanger_no_weight_count_text = '';
        var hanger_home_weight_count_text = '';
        var hanger_dress_weight_count_text = '';



        if (hanger_count.no_weight_count !== 0)
        {
            if (total_count.no_weight_count > hanger_count.no_weight_count)
                hanger_no_weight_count_text = hanger_count.no_weight_count + 'Ω/' + (total_count.no_weight_count - hanger_count.no_weight_count) + '_';
            else
                hanger_no_weight_count_text = hanger_count.no_weight_count + 'Ω';
        }
        else
            hanger_no_weight_count_text = (total_count.no_weight_count - hanger_count.no_weight_count) + '_';


        if (hanger_count.home_weight_count !== 0)
        {
            if (total_count.home_weight_count > hanger_count.home_weight_count)
                hanger_home_weight_count_text = hanger_count.home_weight_count + 'Ω/' + (total_count.home_weight_count - hanger_count.home_weight_count) + '_' ;
            else
                hanger_home_weight_count_text = hanger_count.home_weight_count + 'Ω';
        }
        else
            hanger_home_weight_count_text = (total_count.home_weight_count - hanger_count.home_weight_count) + '_' ;


        if (hanger_count.dress_weight_count !== 0)
        {
            if (total_count.dress_weight_count > hanger_count.dress_weight_count)
                hanger_dress_weight_count_text = hanger_count.dress_weight_count + 'Ω/' + (total_count.dress_weight_count - hanger_count.dress_weight_count) + '_' ;
            else
                hanger_dress_weight_count_text = hanger_count.dress_weight_count + 'Ω';
        }
        else
            hanger_dress_weight_count_text = (total_count.dress_weight_count - hanger_count.dress_weight_count) + '_' ;

        console.log('');


        var result_table = '<div><table border="1" frame="above"> <caption><font size="2">Сумма к оплате </font></caption> <tr> <th>Наименование</th> <th>Сумма</th> </tr>';

        if (no_weight_item_sum !== 0)
        {
            result_table += '<tr><td> Штучные позиции </font>' + hanger_no_weight_count_text  + '</td>';
            result_table += '<td>' + no_weight_item_sum.toString() + ' руб. </td></tr>';

        }

        if (weight_home_item_sum !== 0)
        {
            result_table += '<tr><td>Весовые позиции (домашний текстиль) </font>' + hanger_home_weight_count_text + '</td>';
            result_table += '<td>' + weight_home_item_sum.toString() + ' руб. </td></tr>';
        }

        if (weight_dress_item_sum !== 0)
        {
            result_table += '<tr><td>Весовые позиции (одежда) </font>' + hanger_dress_weight_count_text + '</td>';
            result_table += '<td>' + weight_dress_item_sum.toString() + ' руб. </td></tr>';
        }

        result_table += '<tr><th align="left">Итого:</th> <th align="left">' + Math.floor((no_weight_item_sum + weight_home_item_sum + weight_dress_item_sum)/5)*5 + ' руб. </th> <tr>';

        result_table += '</table> </div>';

        return result_table;
    },

    calc_hanger_count: function(order_details) {
        var no_weight_count = 0;
        var home_weight_count = 0;
        var dress_weight_count = 0;


        for (var next_detail in order_details)
        {
            if (order_details[next_detail].price_type == 'Штучный')
                no_weight_count += (order_details[next_detail].hanger * order_details[next_detail].count);
            else
            {
                if (order_details[next_detail].is_home_weight == 1)
                    home_weight_count += (order_details[next_detail].hanger * order_details[next_detail].count);
                else
                    dress_weight_count += (order_details[next_detail].hanger * order_details[next_detail].count);
            }

        }



        return {no_weight_count:no_weight_count, home_weight_count:home_weight_count, dress_weight_count:dress_weight_count};
    },

    calc_total_count: function(order_details) {
        var no_weight_count = 0;
        var home_weight_count = 0;
        var dress_weight_count = 0;


        for (var next_detail in order_details)
        {
            if (order_details[next_detail].price_type == 'Штучный')
                no_weight_count += order_details[next_detail].count;
            else
            {
                if (order_details[next_detail].is_home_weight == 1)
                    home_weight_count += order_details[next_detail].count;
                else
                    dress_weight_count += order_details[next_detail].count;
            }

        }



        return {no_weight_count:no_weight_count, home_weight_count:home_weight_count, dress_weight_count:dress_weight_count};
    },

    create_docs: function() {


        var t = this;
        var order_record = this.getApplication().getController('order_panel_controller').get_selected_order();
        var id_order = order_record.get('id_order');


        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name		:	'get_order_detail_by_id_order',
                    id_order			:	order_record.get('id_order'),
                    format				:	'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    var newWin = open('url','windowName','height=800,width=800');




                    var containers = '';
                    for (var i = 1; i <= order_record.get('cont_count'); i++)
                        containers += '<div style="border-width:2px;border-style:solid;writing-mode: vertical-rl;font-size: 130;float:left">.' + id_order + '/' + i + '</div>';


                    var details = '';

                    for (var i = 0; i <= result.order_detail_list.length-1; i++)
                    {

                        var item_count = result.order_detail_list[i].count;


                        for (var j = 0; j < item_count; j++)
                        {
                            details += '<div style="border-width:2px;border-style:solid;writing-mode: vertical-rl;font-size: 25;width:100%;float:left">.' + id_order + '<br>';

                            for (var g = 0; g < 11; g++)
                                details += '<br>.' + id_order + '<br>';

                            details += '</div>';

                        }
                    }

                    newWin.document.write(containers + details);

                    t.getAddOrderMenu().destroy();

                }
            });
    },

    create_lines: function(count) {
        if (count === 0)
            return;

        var order_record = this.getApplication().getController('order_panel_controller').get_selected_order();
        var id_order = order_record.get('id_order');


        var newWin = open('url','windowName','height=800,width=800');


        var details = '';

        for (var j = 0; j < count; j++)
        {
            details += '<div style="border-width:2px;border-style:solid;writing-mode: vertical-rl;font-size: 25;width:100%;float:left">.' + id_order + '<br>';

            for (var g = 0; g < 11; g++)
                details += '<br>.' + id_order + '<br>';

            details += '</div>';

        }


        newWin.document.write(details);

        this.getAddOrderMenu().destroy();
    },

    create_stickers: function(count, from) {
        if (count === 0)
            return;

        var order_record = this.getApplication().getController('order_panel_controller').get_selected_order();
        var id_order = order_record.get('id_order');


        var newWin = open('url','windowName','height=800,width=800');


        var containers = '';
        for (var i = 0; i < count; i++)
        {
            var next_index = from + i;
            console.log(i);
            console.log(from);
            containers += '<div style="border-width:2px;border-style:solid;writing-mode: vertical-rl;font-size: 130;float:left">.' + id_order + '/' + next_index + '</div>';
        }




        newWin.document.write(containers);

        this.getAddOrderMenu().destroy();
    }

});