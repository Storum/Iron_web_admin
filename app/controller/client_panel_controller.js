/*
 * File: app/controller/client_panel_controller.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Iron.controller.client_panel_controller', {
    extend: 'Ext.app.Controller',

    requires: [
        'Iron.Utilities'
    ],

    config: {
        views: [
            'ClientMenu'
        ],

        refs: {
            clientPanel: 'panel#clientPanel',
            clientList: 'panel#clientPanel list[itemId=client_list]',
            clientDateCreateField: 'panel#clientPanel datepickerfield[itemId=client_date_create_textfield]',
            clientNameField: 'panel#clientPanel textfield[itemId=client_name_textfield]',
            clientSurnameField: 'panel#clientPanel textfield[itemId=client_surname_textfield]',
            clientPatronymicField: 'panel#clientPanel textfield[itemId=client_patronymic_textfield]',
            clientBirthdayField: 'panel#clientPanel textfield[itemId=birthday_textfield_]',
            clientGender: 'panel#clientPanel selectfield[itemId=client_gender_field]',
            clientCommentField: 'panel#clientPanel textfield[itemId=client_comment_textfield]',
            client_delete_button: 'panel#clientPanel button[itemId=delete_client_button]',
            client_menu_button: 'panel#clientPanel button[itemId=clientmenu_button]',
            client_save_button: 'panel#clientPanel button[itemId=client_save_button]',
            add_client_button: 'panel#clientPanel button[itemId=add_client_button]',
            cancel_button: 'panel#clientPanel button[itemId=cancel_button]',
            select_client_button: 'panel#clientPanel  button[itemId=select_client_button]',
            clientMenu: {
                selector: '#clientMenu',
                xtype: 'clientmenu'
            }
        },

        control: {
            "client_menu_button": {
                tap: 'show_ClientMenu'
            },
            "clientList": {
                itemtap: 'onClientListSelect',
                itemdoubletap: 'onListItemDoubletap'
            },
            "client_save_button": {
                tap: 'save_tap'
            },
            "client_delete_button": {
                tap: 'delete_client_tap'
            },
            "textfield[target='edit_client']": {
                keyup: 'user_data_changed'
            },
            "clientGender": {
                change: 'gender_changed'
            },
            "clientPanel": {
                show: 'clientpanel_Activate'
            },
            "add_client_button": {
                tap: 'add_client'
            },
            "cancel_button": {
                tap: 'cancel_tap'
            },
            "select_client_button": {
                tap: 'select_client'
            }
        }
    },

    show_ClientMenu: function(target) {

        var menu = this.getClientMenu();
        if (!menu) {
            menu = Ext.create('widget.clientmenu');
        }


        // Show menu by menu button
        menu.showBy(target);


    },

    onClientListSelect: function(dataview, index, target, record, e, eOpts) {


        var client_NameField		= this.getClientNameField();
        var client_SurnameField		= this.getClientSurnameField();
        var client_PatronymicField	= this.getClientPatronymicField();
        var client_BirthdayField	= this.getClientBirthdayField();
        var client_GenderField		= this.getClientGender();
        var client_DateField		= this.getClientDateCreateField();
        var client_CommentField		= this.getClientCommentField();



        client_NameField.setValue (record.get('name'));
        client_SurnameField.setValue (record.get('surname'));
        client_PatronymicField.setValue (record.get('patronymic'));
        client_CommentField.setValue (record.get('comment'));
        client_BirthdayField.setValue (Iron.Utilities.date_to_string(record.get('birthday')));
        client_DateField.setValue (record.get('date_create'));
        client_GenderField.setValue (record.get('gender'));


        this.change_btn_disable (false);
        this.change_save_btn_status (true);
    },

    onListItemDoubletap: function(dataview, index, target, record, e, eOpts) {
        var client_panel = this.getClientPanel();


        if (client_panel.source)
        {
            var client_list = this.getClientList();
            this.getApplication().getController(client_panel.source).set_client_name(client_list.getSelection()[0].get('name'), client_list.getSelection()[0].get('id_client'));
            client_panel.destroy();
        }


    },

    save_tap: function(button, e, eOpts) {


        var name = this.getClientNameField().getValue();
        var surname = this.getClientSurnameField().getValue();
        var patronymic = this.getClientPatronymicField().getValue();
        var comment = this.getClientCommentField().getValue();
        var birthday = this.getClientBirthdayField().getValue();
        var id_gender		= this.getClientGender().getValue();

        var cleint_list = this.getClientList();
        var selected_id_client = cleint_list.getSelection ()[0].get('id_client');

        var t = this;


        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name: 'update_client_data',
                    id_client: selected_id_client,
                    name: name,
                    surname: surname,
                    patronymic: patronymic,
                    birthday: birthday,
                    id_gender: id_gender,
                    comment: comment,
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {

                    t.update_client_list();
                    t.change_save_btn_status(true);

                    t.select_client_in_listview (cleint_list, selected_id_client);
                }
            });

    },

    delete_client_tap: function(button, e, eOpts) {
        var client_list = this.getClientList();
        var selected_id_client = client_list.getSelection ()[0].get('id_client');

        this.delete_client (selected_id_client, false);
    },

    user_data_changed: function(textfield, e, eOpts) {
        this.check_field_change ();
    },

    gender_changed: function(selectfield, newValue, oldValue, eOpts) {
        this.check_field_change ();
    },

    clientpanel_Activate: function(component, eOpts) {
        this.update_client_list();
        this.update_gender_list();

    },

    add_client: function(button, e, eOpts) {

        addClientPanel = Ext.create('widget.addclientpanel');
        Ext.Viewport.add(addClientPanel);
        addClientPanel.show();

    },

    cancel_tap: function(button, e, eOpts) {
        var client_panel = this.getClientPanel();
        client_panel.destroy();
    },

    select_client: function(button, e, eOpts) {

        var client_list = this.getClientList();
        var client_panel = this.getClientPanel();


        this.getApplication().getController(client_panel.source).set_client_name(client_list.getSelection()[0].get('name'), client_list.getSelection()[0].get('id_client'));


        client_panel.destroy();
    },

    update_client_list: function() {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name: 'get_client_list',
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_client_store (result.client_list);
                }
            });
    },

    update_gender_list: function() {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name: 'get_gender_list',
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_gender_store (result.gender_list);
                }
            });
    },

    update_gender_store: function(data) {

        var gender_select = this.getClientGender();
        var gender_store = gender_select.getStore();


        gender_store.data.clear();
        gender_store.setData(data);

    },

    update_client_store: function(data) {

        var client_ListView = this.getClientList();
        var client_store = client_ListView.getStore();

        client_store.data.clear();
        client_store.setData(data);

    },

    change_btn_disable: function(disabled) {
        var clnt_del_btn = this.getClient_delete_button ();
        var clnt_menu_btn = this.getClient_menu_button();
        var clnt_select_btn = this.getSelect_client_button();



        clnt_del_btn.setDisabled (disabled);
        clnt_menu_btn.setDisabled (disabled);
        clnt_select_btn.setDisabled (disabled);
    },

    change_save_btn_status: function(newValue) {
        var clnt_save_btn = this.getClient_save_button();
        clnt_save_btn.setDisabled (newValue);
    },

    check_field_change: function() {
        var client_list = this.getClientList();


        if (client_list.getSelection().length !== 0)
        {
            var name		= this.getClientNameField();
            var surname		= this.getClientSurnameField();
            var patronymic	= this.getClientPatronymicField();
            var comment		= this.getClientCommentField();
            var birthday	= this.getClientBirthdayField();
            var gender		= this.getClientGender();


            if (client_list.getSelection()[0].get(name.getName()) !== name.getValue())
            {
                this.change_save_btn_status (false);
                return;
            }


            if (client_list.getSelection()[0].get(surname.getName()) !== surname.getValue())
            {
                this.change_save_btn_status (false);
                return;
            }

            if (client_list.getSelection()[0].get(patronymic.getName()) !== patronymic.getValue())
            {
                this.change_save_btn_status (false);
                return;
            }

            if (client_list.getSelection()[0].get(comment.getName()) !== comment.getValue())
            {
                this.change_save_btn_status (false);
                return;
            }



            if (Iron.Utilities.date_to_string(client_list.getSelection()[0].get(birthday.getName())) !== birthday.getValue())
            {
                this.change_save_btn_status (false);
                return;
            }


            if (parseInt(client_list.getSelection()[0].get(gender.getName()), 0) !== gender.getValue())
            {
                this.change_save_btn_status (false);
                return;
            }



            this.change_save_btn_status (true);

        }
    },

    select_client_in_listview: function(listview, id_client) {


        var store = listview.getStore();
        var record_index = store.find ('id_client', id_client);
        listview.select (0, false, true);

        //listview.fireEvent('itemtap', listview, 0, listview.getAt(0), null, null);
    },

    delete_client: function(id_client, is_silent) {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name: 'delete_client',
                    id_client: id_client,
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    var client_list = t.getClientList();

                    t.update_client_list();
                    t.change_save_btn_status(true);

                    t.select_client_in_listview (client_list, id_client);

                    Ext.Msg.alert('Iron', result.text);
                }
            });
    },

    get_current_client_id: function() {
        var client_list = this.getClientList();

        if (client_list)
        {
            var selected_id_client = client_list.getSelection ()[0].get('id_client');
            return selected_id_client;
        }
        else
            return null;

    },

    is_birthday_correct: function() {
        var birthday = this.getClientNameField().getValue();
    }

});