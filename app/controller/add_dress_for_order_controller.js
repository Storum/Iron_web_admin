/*
 * File: app/controller/add_dress_for_order_controller.js
 *
 * This file was generated by Sencha Architect version 3.0.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Sencha Touch 2.3.x library, under independent license.
 * License of Sencha Architect does not include license for Sencha Touch 2.3.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Iron.controller.add_dress_for_order_controller', {
    extend: 'Ext.app.Controller',

    config: {
        refs: {
            addDressForOrderPanel: 'panel#addDressForOrderPanel',
            item_type_group_fld: 'panel#addDressForOrderPanel selectfield[itemId=item_type_group_fld]',
            item_type_fld: 'panel#addDressForOrderPanel selectfield[itemId=item_type_fld]',
            count_fld: 'panel#addDressForOrderPanel numberfield[itemId=count_fld]',
            color_fld: 'panel#addDressForOrderPanel selectfield[itemId=color_fld]',
            gender_fld: 'panel#addDressForOrderPanel selectfield[itemId=gender_fld]',
            is_lable_fld: 'panel#addDressForOrderPanel checkboxfield[itemId=is_lable_fld]',
            comment_fld: 'panel#addDressForOrderPanel textfield[itemId=comment_fld]',
            wear_fld: 'panel#addDressForOrderPanel numberfield[itemId=wear_fld]',
            price_fld: 'panel#addDressForOrderPanel selectfield[itemId=price_fld]',
            ok_btn: 'panel#addDressForOrderPanel button[itemId=ok_btn]',
            cancle_btn: 'panel#addDressForOrderPanel button[itemId=cancle_btn]'
        },

        control: {
            "addDressForOrderPanel": {
                show: 'onAddDressForOrderPanelShow'
            },
            "item_type_group_fld": {
                change: 'item_type_group_select'
            },
            "item_type_fld": {
                change: 'item_select'
            },
            "color_fld": {
                change: 'color_select'
            },
            "gender_fld": {
                change: 'gender_select'
            },
            "wear_fld": {
                keyup: 'wear_fld'
            },
            "count_fld": {
                keyup: 'count_fld'
            },
            "price_fld": {
                change: 'price_changed'
            },
            "ok_btn": {
                tap: 'Ok_btn'
            },
            "cancle_btn": {
                tap: 'cancle_btn'
            }
        }
    },

    onAddDressForOrderPanelShow: function(component, eOpts) {
        this.update_item_type_groups_list();
    },

    item_type_group_select: function(selectfield, newValue, oldValue, eOpts) {
        if (newValue)
            this.update_item_types_list (newValue);


        this.getPrice_fld().setDisabled(true);
        this.check_all_fields();
    },

    item_select: function(selectfield, newValue, oldValue, eOpts) {
        if (newValue)
        {
            this.update_price_list(newValue);


            var is_home_weight = selectfield.getStore().findRecord('id_item_type', newValue).get('is_home_weight');

            if (is_home_weight === 1){
                this.getGender_fld().setHidden(true);
                this.getWear_fld().setHidden(true);
                this.getIs_lable_fld().setHidden(true);
            }
            else{
                this.getGender_fld().setHidden(false);
                this.getWear_fld().setHidden(false);
                this.getIs_lable_fld().setHidden(false);
            }
        }

        this.check_all_fields();
    },

    color_select: function(selectfield, newValue, oldValue, eOpts) {
        this.check_all_fields();
    },

    gender_select: function(selectfield, newValue, oldValue, eOpts) {
        this.check_all_fields();
    },

    wear_fld: function(textfield, e, eOpts) {
        this.check_all_fields();
    },

    count_fld: function(textfield, e, eOpts) {
        this.check_all_fields();
    },

    price_changed: function(selectfield, newValue, oldValue, eOpts) {
        /*if (newValue)
        {
            var price_type = this.getPrice_fld().getStore().findRecord('id_price', newValue).get('price_type_name');

            if (price_type === 'Весовой'){
                this.getCount_fld().setValue("");
                this.getCount_fld().setHidden(true);
            }
            else{
                this.getCount_fld().setValue(1);
                this.getCount_fld().setHidden(false);
            }

            this.check_all_fields();
        }*/


        this.check_all_fields();

    },

    Ok_btn: function(button, e, eOpts) {
        var add_dress_for_order_panel = this.getAddDressForOrderPanel();

        var source_controller = add_dress_for_order_panel.source;




        var id_item_type_group = this.getItem_type_group_fld().getValue();

        var id_item_type = this.getItem_type_fld().getValue();
        var item_type_name = this.getItem_type_fld().getStore().findRecord('id_item_type',id_item_type).get('name');
        var is_home_weight = this.getItem_type_fld().getStore().findRecord('id_item_type', id_item_type).get('is_home_weight');

        var id_gender = this.getGender_fld().getValue();

        if (id_gender)
            var gender = this.getGender_fld().getStore().findRecord('id_gender', id_gender).get('name');

        var id_color = this.getColor_fld().getValue();
        var color = this.getColor_fld().getStore().findRecord('id_color', id_color).get('name');

        var wear = this.getWear_fld().getValue();
        var id_price = this.getPrice_fld().getValue();
        var price_type = this.getPrice_fld().getStore().findRecord('id_price', id_price).get('price_type_name');
        var price = this.getPrice_fld().getStore().findRecord('id_price', id_price).get('price');


        var is_lable_ = this.getIs_lable_fld().isChecked();
        var is_lable = 0;
        if (is_lable_)
            is_lable = 1;

        var comment = this.getComment_fld().getValue();
        var number = this.getApplication().getController(source_controller).get_order_detail_count() + 1;
        var count = this.getCount_fld().getValue();




        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name	:	'get_current_action_by_item_id',
                    id_item_type	:	id_item_type,
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {

                    var action_name = ' ';
                    var action_type = '';
                    var action_value = 0;
                    var id_action = 0;


                    if (result.current_item_action_list.length > 0)
                    {
                        action_name = result.current_item_action_list[0].action_name;
                        action_type = result.current_item_action_list[0].action_type;
                        action_value = result.current_item_action_list[0].action_value;
                        id_action = result.current_item_action_list[0].id_action;
                    }


                    if (add_dress_for_order_panel.target == 'add')
                        t.getApplication().getController(source_controller).add_order_detail(number, id_item_type_group, id_item_type, is_home_weight, count, id_color, color, id_gender, gender, wear, id_price, price_type, price, id_action, action_name, action_type, action_value, is_lable, item_type_name, comment);
                    else
                        t.getApplication().getController(source_controller).edit_order_detail(number, id_item_type_group, id_item_type, is_home_weight, count, id_color, color, id_gender, gender, wear, id_price, price_type, price, id_action, action_name, action_type, action_value, is_lable, item_type_name, comment, add_dress_for_order_panel.record);


                    add_dress_for_order_panel.destroy();
                }
            });



    },

    cancle_btn: function(button, e, eOpts) {
        var add_dress_for_order_panel = this.getAddDressForOrderPanel();
        add_dress_for_order_panel.destroy();
    },

    update_item_type_groups_list: function() {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name: 'get_item_type_groups',
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_item_type_groups_store (result.item_type_groups_list);
                }
            });
    },

    update_item_type_groups_store: function(data) {


        var item_groups_select_field = this.getItem_type_group_fld();
        var item_groups_select_store = item_groups_select_field.getStore();

        item_groups_select_store.data.clear();
        item_groups_select_store.setData(data);


        var add_dress_panel = this.getAddDressForOrderPanel();



        if (add_dress_panel.target == 'edit'){

            var item_type_group_fld = this.getItem_type_group_fld();
            item_type_group_fld.setValue(add_dress_panel.record.get('id_item_type_group'));
        }
    },

    update_item_types_list: function(id_item_type_group) {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name:			'get_item_types_by_group_type',
                    id_item_type_group:		id_item_type_group,
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_item_types_store (result.item_types_list);
                }
            });
    },

    update_item_types_store: function(data) {

        var item_select_field = this.getItem_type_fld();
        var item_select_store = item_select_field.getStore();

        item_select_store.data.clear();
        item_select_store.setData(data);

        item_select_field.setDisabled(false);


        var add_dress_panel = this.getAddDressForOrderPanel();

        if (add_dress_panel.target == 'edit'){

            var item_type_fld = this.getItem_type_fld();
            item_type_fld.setValue(add_dress_panel.record.get('id_item_type'));
        }
    },

    update_color_list: function() {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name:	'get_color_list',
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_color_store (result.color_list);
                }
            });
    },

    update_color_store: function(data) {

        var color_field = this.getColor_fld();
        var color_store = color_field.getStore();

        color_store.data.clear();
        color_store.setData(data);



        var add_dress_panel = this.getAddDressForOrderPanel();
        if (add_dress_panel.target == 'edit'){

            var color_fld = this.getColor_fld();
            color_fld.setValue(add_dress_panel.record.get('id_color'));
        }


        this.update_gender_list();
    },

    update_gender_list: function() {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name:	'get_gender_list',
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_gender_store (result.gender_list);
                }
            });
    },

    update_gender_store: function(data) {

        var gender_field = this.getGender_fld();
        var gender_store = gender_field.getStore();

        gender_store.data.clear();
        gender_store.setData(data);


        var add_dress_panel = this.getAddDressForOrderPanel();

        if (add_dress_panel.target == 'edit'){

            var gender_fld = this.getGender_fld();
            gender_fld.setValue(add_dress_panel.record.get('id_gender'));
            this.fill_fields_from_record (add_dress_panel.record);
        }


    },

    update_price_list: function(id_item_type) {
        var t = this;

        Ext.data.JsonP.request(
            {
                url: GlobalVars.url_setting + 'php/base_functional.php',
                params:
                {
                    function_name	:	'get_current_price_list_by_item_id',
                    id_item_type	:	id_item_type,
                    format: 'json'
                },
                callbackKey: 'callback',
                async: false,
                success: function (result)
                {
                    t.update_price_store (result.current_price_list);
                }
            });
    },

    update_price_store: function(data) {

        var price_field = this.getPrice_fld();
        var price_store = price_field.getStore();

        price_store.data.clear();
        price_store.setData(data);

        price_field.setDisabled(false);


        var add_dress_panel = this.getAddDressForOrderPanel();

        if (add_dress_panel.target == 'edit'){

            var price_fld = this.getPrice_fld();
            price_fld.setValue(add_dress_panel.record.get('id_price'));
        }


        this.update_color_list();
    },

    check_all_fields: function() {
        var id_gender = this.getGender_fld().getValue();
        var id_color = this.getColor_fld().getValue();
        var id_item_type = this.getItem_type_fld().getValue();
        var wear = this.getWear_fld().getValue();
        var id_price = this.getPrice_fld().getValue();



        if (!id_item_type)
            return;

        var is_home_weight = this.getItem_type_fld().getStore().findRecord('id_item_type', id_item_type).get('is_home_weight');


        if (is_home_weight === 1)
        {
            if (id_item_type > 0 && id_price >0)
                this.set_buttons_disable (false);
            else
                this.set_buttons_disable (true);
        }
        else
        {
            if (id_gender > 0 && id_color > 0 && id_item_type > 0 && wear > 0 && id_price >0)
                this.set_buttons_disable (false);
            else
                this.set_buttons_disable (true);
        }


    },

    set_buttons_disable: function(disable) {
        var ok_btn = this.getOk_btn();
        ok_btn.setDisabled(disable);
    },

    fill_fields_from_record: function(record) {
        var wear_fld = this.getWear_fld();
        var comment_fld = this.getComment_fld();
        var count_fld = this.getCount_fld();
        var is_lable_fld = this.getIs_lable_fld();


        count_fld.setValue(record.get('count'));
        wear_fld.setValue(record.get('wear'));
        comment_fld.setValue(record.get('comment'));


        if (record.get('is_lable') == 1)
            is_lable_fld.check();



    }

});